-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contact.Query exposing (..)

import Contact.Enum.ContactsOrderBy
import Contact.InputObject
import Contact.Interface
import Contact.Object
import Contact.Scalar
import Contact.ScalarCodecs
import Contact.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


{-| Exposes the root query type nested one level down. This is helpful for Relay 1 which can only query top level fields if they are in a particular form.
-}
query :
    SelectionSet decodesTo RootQuery
    -> SelectionSet decodesTo RootQuery
query object____ =
    Object.selectionForCompositeField "query" [] object____ identity


{-| The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
-}
nodeId : SelectionSet Contact.ScalarCodecs.Id RootQuery
nodeId =
    Object.selectionForField "ScalarCodecs.Id" "nodeId" [] (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapCodecs |> .codecId |> .decoder)


type alias NodeRequiredArguments =
    { nodeId : Contact.ScalarCodecs.Id }


{-| Fetches an object given its globally unique `ID`.

  - nodeId - The globally unique `ID`.

-}
node :
    NodeRequiredArguments
    -> SelectionSet decodesTo Contact.Interface.Node
    -> SelectionSet (Maybe decodesTo) RootQuery
node requiredArgs____ object____ =
    Object.selectionForCompositeField "node" [ Argument.required "nodeId" requiredArgs____.nodeId (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecId) ] object____ (identity >> Decode.nullable)


type alias AllContactsOptionalArguments =
    { first : OptionalArgument Int
    , last : OptionalArgument Int
    , offset : OptionalArgument Int
    , before : OptionalArgument Contact.ScalarCodecs.Cursor
    , after : OptionalArgument Contact.ScalarCodecs.Cursor
    , orderBy : OptionalArgument (List Contact.Enum.ContactsOrderBy.ContactsOrderBy)
    , condition : OptionalArgument Contact.InputObject.ContactCondition
    }


{-| Reads and enables pagination through a set of `Contact`.

  - first - Only read the first `n` values of the set.
  - last - Only read the last `n` values of the set.
  - offset - Skip the first `n` values from our `after` cursor, an alternative to cursor based pagination. May not be used with `last`.
  - before - Read all values in the set before (above) this cursor.
  - after - Read all values in the set after (below) this cursor.
  - orderBy - The method to use when ordering `Contact`.
  - condition - A condition to be used in determining which values should be returned by the collection.

-}
allContacts :
    (AllContactsOptionalArguments -> AllContactsOptionalArguments)
    -> SelectionSet decodesTo Contact.Object.ContactsConnection
    -> SelectionSet (Maybe decodesTo) RootQuery
allContacts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent, last = Absent, offset = Absent, before = Absent, after = Absent, orderBy = Absent, condition = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "before" filledInOptionals____.before (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecCursor), Argument.optional "after" filledInOptionals____.after (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecCursor), Argument.optional "orderBy" filledInOptionals____.orderBy (Encode.enum Contact.Enum.ContactsOrderBy.toString |> Encode.list), Argument.optional "condition" filledInOptionals____.condition Contact.InputObject.encodeContactCondition ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "allContacts" optionalArgs____ object____ (identity >> Decode.nullable)


type alias ContactByIdRequiredArguments =
    { id : Contact.ScalarCodecs.Uuid }


contactById :
    ContactByIdRequiredArguments
    -> SelectionSet decodesTo Contact.Object.Contact
    -> SelectionSet (Maybe decodesTo) RootQuery
contactById requiredArgs____ object____ =
    Object.selectionForCompositeField "contactById" [ Argument.required "id" requiredArgs____.id (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecUuid) ] object____ (identity >> Decode.nullable)


type alias ContactRequiredArguments =
    { nodeId : Contact.ScalarCodecs.Id }


{-| Reads a single `Contact` using its globally unique `ID`.

  - nodeId - The globally unique `ID` to be used in selecting a single `Contact`.

-}
contact :
    ContactRequiredArguments
    -> SelectionSet decodesTo Contact.Object.Contact
    -> SelectionSet (Maybe decodesTo) RootQuery
contact requiredArgs____ object____ =
    Object.selectionForCompositeField "contact" [ Argument.required "nodeId" requiredArgs____.nodeId (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecId) ] object____ (identity >> Decode.nullable)
