-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Contact.InputObject exposing (..)

import Contact.Interface
import Contact.Object
import Contact.Scalar
import Contact.ScalarCodecs
import Contact.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildContactCondition :
    (ContactConditionOptionalFields -> ContactConditionOptionalFields)
    -> ContactCondition
buildContactCondition fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, email = Absent, firstname = Absent, lastname = Absent, createdAt = Absent }
    in
    { id = optionals____.id, email = optionals____.email, firstname = optionals____.firstname, lastname = optionals____.lastname, createdAt = optionals____.createdAt }


type alias ContactConditionOptionalFields =
    { id : OptionalArgument Contact.ScalarCodecs.Uuid
    , email : OptionalArgument String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , createdAt : OptionalArgument Contact.ScalarCodecs.Datetime
    }


{-| Type for the ContactCondition input object.
-}
type alias ContactCondition =
    { id : OptionalArgument Contact.ScalarCodecs.Uuid
    , email : OptionalArgument String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , createdAt : OptionalArgument Contact.ScalarCodecs.Datetime
    }


{-| Encode a ContactCondition into a value that can be used as an argument.
-}
encodeContactCondition : ContactCondition -> Value
encodeContactCondition input____ =
    Encode.maybeObject
        [ ( "id", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "email", Encode.string |> Encode.optional input____.email ), ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "lastname", Encode.string |> Encode.optional input____.lastname ), ( "createdAt", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildContactInput :
    ContactInputRequiredFields
    -> (ContactInputOptionalFields -> ContactInputOptionalFields)
    -> ContactInput
buildContactInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, firstname = Absent, lastname = Absent, createdAt = Absent }
    in
    { id = optionals____.id, email = required____.email, firstname = optionals____.firstname, lastname = optionals____.lastname, createdAt = optionals____.createdAt }


type alias ContactInputRequiredFields =
    { email : String }


type alias ContactInputOptionalFields =
    { id : OptionalArgument Contact.ScalarCodecs.Uuid
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , createdAt : OptionalArgument Contact.ScalarCodecs.Datetime
    }


{-| Type for the ContactInput input object.
-}
type alias ContactInput =
    { id : OptionalArgument Contact.ScalarCodecs.Uuid
    , email : String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , createdAt : OptionalArgument Contact.ScalarCodecs.Datetime
    }


{-| Encode a ContactInput into a value that can be used as an argument.
-}
encodeContactInput : ContactInput -> Value
encodeContactInput input____ =
    Encode.maybeObject
        [ ( "id", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "email", Encode.string input____.email |> Just ), ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "lastname", Encode.string |> Encode.optional input____.lastname ), ( "createdAt", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildContactPatch :
    (ContactPatchOptionalFields -> ContactPatchOptionalFields)
    -> ContactPatch
buildContactPatch fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, email = Absent, firstname = Absent, lastname = Absent, createdAt = Absent }
    in
    { id = optionals____.id, email = optionals____.email, firstname = optionals____.firstname, lastname = optionals____.lastname, createdAt = optionals____.createdAt }


type alias ContactPatchOptionalFields =
    { id : OptionalArgument Contact.ScalarCodecs.Uuid
    , email : OptionalArgument String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , createdAt : OptionalArgument Contact.ScalarCodecs.Datetime
    }


{-| Type for the ContactPatch input object.
-}
type alias ContactPatch =
    { id : OptionalArgument Contact.ScalarCodecs.Uuid
    , email : OptionalArgument String
    , firstname : OptionalArgument String
    , lastname : OptionalArgument String
    , createdAt : OptionalArgument Contact.ScalarCodecs.Datetime
    }


{-| Encode a ContactPatch into a value that can be used as an argument.
-}
encodeContactPatch : ContactPatch -> Value
encodeContactPatch input____ =
    Encode.maybeObject
        [ ( "id", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecUuid) |> Encode.optional input____.id ), ( "email", Encode.string |> Encode.optional input____.email ), ( "firstname", Encode.string |> Encode.optional input____.firstname ), ( "lastname", Encode.string |> Encode.optional input____.lastname ), ( "createdAt", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecDatetime) |> Encode.optional input____.createdAt ) ]


buildCreateContactInput :
    CreateContactInputRequiredFields
    -> (CreateContactInputOptionalFields -> CreateContactInputOptionalFields)
    -> CreateContactInput
buildCreateContactInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, contact = required____.contact }


type alias CreateContactInputRequiredFields =
    { contact : ContactInput }


type alias CreateContactInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateContactInput input object.
-}
type alias CreateContactInput =
    { clientMutationId : OptionalArgument String
    , contact : ContactInput
    }


{-| Encode a CreateContactInput into a value that can be used as an argument.
-}
encodeCreateContactInput : CreateContactInput -> Value
encodeCreateContactInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "contact", encodeContactInput input____.contact |> Just ) ]


buildDeleteContactByIdInput :
    DeleteContactByIdInputRequiredFields
    -> (DeleteContactByIdInputOptionalFields -> DeleteContactByIdInputOptionalFields)
    -> DeleteContactByIdInput
buildDeleteContactByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, id = required____.id }


type alias DeleteContactByIdInputRequiredFields =
    { id : Contact.ScalarCodecs.Uuid }


type alias DeleteContactByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteContactByIdInput input object.
-}
type alias DeleteContactByIdInput =
    { clientMutationId : OptionalArgument String
    , id : Contact.ScalarCodecs.Uuid
    }


{-| Encode a DeleteContactByIdInput into a value that can be used as an argument.
-}
encodeDeleteContactByIdInput : DeleteContactByIdInput -> Value
encodeDeleteContactByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "id", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ) ]


buildDeleteContactInput :
    DeleteContactInputRequiredFields
    -> (DeleteContactInputOptionalFields -> DeleteContactInputOptionalFields)
    -> DeleteContactInput
buildDeleteContactInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId }


type alias DeleteContactInputRequiredFields =
    { nodeId : Contact.ScalarCodecs.Id }


type alias DeleteContactInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteContactInput input object.
-}
type alias DeleteContactInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Contact.ScalarCodecs.Id
    }


{-| Encode a DeleteContactInput into a value that can be used as an argument.
-}
encodeDeleteContactInput : DeleteContactInput -> Value
encodeDeleteContactInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ) ]


buildUpdateContactByIdInput :
    UpdateContactByIdInputRequiredFields
    -> (UpdateContactByIdInputOptionalFields -> UpdateContactByIdInputOptionalFields)
    -> UpdateContactByIdInput
buildUpdateContactByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, contactPatch = required____.contactPatch, id = required____.id }


type alias UpdateContactByIdInputRequiredFields =
    { contactPatch : ContactPatch
    , id : Contact.ScalarCodecs.Uuid
    }


type alias UpdateContactByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateContactByIdInput input object.
-}
type alias UpdateContactByIdInput =
    { clientMutationId : OptionalArgument String
    , contactPatch : ContactPatch
    , id : Contact.ScalarCodecs.Uuid
    }


{-| Encode a UpdateContactByIdInput into a value that can be used as an argument.
-}
encodeUpdateContactByIdInput : UpdateContactByIdInput -> Value
encodeUpdateContactByIdInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "contactPatch", encodeContactPatch input____.contactPatch |> Just ), ( "id", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecUuid) input____.id |> Just ) ]


buildUpdateContactInput :
    UpdateContactInputRequiredFields
    -> (UpdateContactInputOptionalFields -> UpdateContactInputOptionalFields)
    -> UpdateContactInput
buildUpdateContactInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { clientMutationId = optionals____.clientMutationId, nodeId = required____.nodeId, contactPatch = required____.contactPatch }


type alias UpdateContactInputRequiredFields =
    { nodeId : Contact.ScalarCodecs.Id
    , contactPatch : ContactPatch
    }


type alias UpdateContactInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateContactInput input object.
-}
type alias UpdateContactInput =
    { clientMutationId : OptionalArgument String
    , nodeId : Contact.ScalarCodecs.Id
    , contactPatch : ContactPatch
    }


{-| Encode a UpdateContactInput into a value that can be used as an argument.
-}
encodeUpdateContactInput : UpdateContactInput -> Value
encodeUpdateContactInput input____ =
    Encode.maybeObject
        [ ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ), ( "nodeId", (Contact.ScalarCodecs.codecs |> Contact.Scalar.unwrapEncoder .codecId) input____.nodeId |> Just ), ( "contactPatch", encodeContactPatch input____.contactPatch |> Just ) ]
